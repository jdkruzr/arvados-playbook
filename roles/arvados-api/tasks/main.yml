- name: "Install nginx on API host"
  apt:
    name: "nginx"
    state: present

- name: "Install Ruby on API host"
  apt:
    name: "ruby"
    state: present

- name: "Install Ruby dev package on API host"
  apt:
    name: "ruby-dev"
    state: present

- name: "Install Bundler on API host"
  apt:
    name: "bundler"
    state: present

- name: "Remove default nginx config"
  ansible.builtin.file:
    path: /etc/nginx/sites-enabled/default
    state: absent

- name: "Install Passenger"
  apt:
    name: libnginx-mod-http-passenger
    state: present

- name: "Install Passenger conf"
  ansible.builtin.file:
    src: /usr/share/nginx/modules-available/mod-http-passenger.load
    dest: /etc/nginx/modules-enabled/50-mod-http-passenger.conf
    owner: www-data
    group: www-data
    state: link

- name: "Install postgresql-client"
  apt:
    name: "postgresql-client"
    state: present

- name: "Install git"
  apt:
    name: "git"
    state: present

- name: "Install ssl-cert"
  apt:
    name: "ssl-cert"
    state: present

- name: "Create snakeoil"
  command: make-ssl-cert generate-default-snakeoil --force-overwrite


- name: "Add Arvados nginx config file"
  copy:
    dest: "/etc/nginx/conf.d/arvados-api-and-controller.conf"
    content: |
      proxy_http_version 1.1;

      # When Keep clients request a list of Keep services from the API
      # server, use the origin IP address to determine if the request came
      # from the internal subnet or it is an external client.  This sets the
      # $external_client variable which in turn is used to set the
      # X-External-Client header.
      #
      # The API server uses this header to choose whether to respond to a
      # "available keep services" request with either a list of internal keep
      # servers (0) or with the keepproxy (1).
      #
      # Following the example here, update the 10.20.30.0/24 netmask
      # to match your private subnet.
      # Update 1.2.3.4 and add lines as necessary with the public IP
      # address of all servers that can also access the private network to
      # ensure they are not considered 'external'.

      geo $external_client {
        default        1;
        127.0.0.0/24   0;
        192.168.9.0/24  0;
        129.114.3.115/32     0;
      }

      # This is the port where nginx expects to contact arvados-controller.
      upstream controller {
        server     localhost:8003  fail_timeout=10s;
      }
      # ^-- This doesn't appear to have ever worked as designed? Like nginx had no idea what "controller" was.
      
      server {
        # This configures the public https port that clients will actually connect to,
        # the request is reverse proxied to the upstream 'controller'

        listen       443 ssl;
        server_name  arvados-api;

        ssl_certificate /etc/ssl/certs/ssl-cert-snakeoil.pem;
        ssl_certificate_key /etc/ssl/private/ssl-cert-snakeoil.key;

        # Refer to the comment about this setting in the passenger (arvados
        # api server) section of your Nginx configuration.
        client_max_body_size 1024m;

        location / {
          proxy_pass            http://127.0.0.1:8003;
          proxy_redirect        off;
          proxy_connect_timeout 90s;
          proxy_read_timeout    300s;

          proxy_set_header      X-Forwarded-Proto https;
          proxy_set_header      Host $http_host;
          proxy_set_header      X-External-Client $external_client;
          proxy_set_header      X-Real-IP $remote_addr;
          proxy_set_header      X-Forwarded-For $proxy_add_x_forwarded_for;
        }
      }

      server {
        # This configures the Arvados API server.  It is written using Ruby
        # on Rails and uses the Passenger application server.

        listen 8004;
        server_name localhost-api;

        root /var/www/arvados-api/current/public;
        index  index.html index.htm index.php;

        passenger_enabled on;

        # If you are using RVM, uncomment the line below.
        # If you're using system ruby, leave it commented out.
        #passenger_ruby /usr/local/rvm/wrappers/default/ruby;

        # This value effectively limits the size of API objects users can
        # create, especially collections.  If you change this, you should
        # also ensure the following settings match it:
        # * `client_max_body_size` in the previous server section
        # * `API.MaxRequestSize` in config.yml
        client_max_body_size 1024m;
      }

- name: "Restart nginx"
  systemd:
    name: nginx
    daemon-reload: yes
    state: restarted

- name: "Install Arvados API server"
  apt:
    name: "arvados-api-server"
    state: present

- name: "Install Arvados controller"
  apt:
    name: "arvados-controller"
    state: present

- name: "Restart nginx again"
  systemd:
    name: nginx
    daemon-reload: yes
    state: restarted

- name: "Restart controller"
  systemd:
    name: arvados-controller
    state: restarted

- name: Add git user with a bash shell, correct homedir
  ansible.builtin.user:
    name: git
    shell: /bin/bash
    home: /var/lib/arvados/git
    state: present

- name: Create git user homedir
  ansible.builtin.file:
    path: /var/lib/arvados/git
    state: directory
    mode: '0755'
    owner: git
    group: git

- name: Generate keypair
  community.crypto.openssh_keypair:
    path: /var/lib/arvados/git/.ssh

- name: Clone gitolite
  become: true
  become_user: git
  ansible.builtin.git:
    repo: 'https://github.com/sitaramc/gitolite'
    dest: /var/lib/arvados/git/gitolite
    version: v3.6.11

- name: Create bin directory
  ansible.builtin.file:
    path: /var/lib/arvados/git/bin
    owner: git
    group: git
    state: directory
    mode: '0755'

- name: Install git executable
  become: true
  become_user: git
  ansible.builtin.shell: /var/lib/arvados/git/gitolite/install -ln /var/lib/arvados/git/bin

- name: Install arvados-dispatch-cloud
  apt:
    name: arvados-dispatch-cloud
    state: present

- name: "Don't actually enable and start cloud dispatch"
  ansible.builtin.systemd:
    name: 'arvados-dispatch-cloud'
    enabled: no
    state: stopped

# - name: gitolite setup
#   become: true
#   become_user: git
#   ansible.builtin.shell: /var/lib/arvados/git/bin/gitolite setup -pk /var/lib/arvados/git/.ssh/id_rsa.pub

# - name: Checkout admin repo
#   become: true
#   become_user: git
#   ansible.builtin.git:
#     repo: git@localhost:gitolite-admin
#     dest: /var/lib/arvados/git

# - name: more gitolite setup
#   become: true
#   become_user: git
#   copy:
#     dest: /var/lib/arvados/git/.git/config
#     content: |
#       [core]
#       repositoryformatversion = 0
#       filemode = true
#       bare = false
#       logallrefupdates = true
#       [user]
#       name = arvados
#       email = arvados
#       [push]
#       default = simple

# name: more gitolite setup
#   become: true
#   become_user: git
#   copy:
#     dest: 
#     content: |
#       my $repo_aliases;
#       my $aliases_src = "$ENV{HOME}/.gitolite/arvadosaliases.pl";
#       if ($ENV{HOME} && (-e $aliases_src)) {
#         $repo_aliases = do $aliases_src;
#       }
#       $repo_aliases ||= {};