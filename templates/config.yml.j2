Clusters:
  {{ cluster_id }}:
    SystemRootToken: "{{ system_root_token }}"
    ManagementToken: "{{ management_token }}"
    Collections:
      BlobSigningKey: "{{ blob_signing_key }}"
    API:
      RailsSessionSecretToken: "{{ rails_session_secret_token }}"
    PostgreSQL:
      Connection:
        host: "{{ postgres_host }}"
        user: "{{ postgres_user }}"
        password: "{{ postgres_password }}"
        dbname: "{{ postgres_database_name }}"
    Login:
      PAM:
        Enable: false
        Service: other
      Google:
        Enable: true
        ClientID: "{{ google_client_id }}"
        ClientSecret: "{{ google_client_secret }}"
        AuthenticationRequestParameters:
          prompt: select_account
    Users:
      # The e-mail address of the user you would like to become marked as an admin
      # user on their first login.
      AutoAdminUserWithEmail: "{{ auto_admin_user_email }}"
      AnonymousUserToken: "{{ anonymous_user_token }}"
    Services:
      Controller:
        ExternalURL: "{{ controller_external_url }}"
        InternalURLs:
          "{{ rails_internal_url }}": {}
      RailsAPI:
      # Does not have an ExternalURL
        InternalURLs:
          "{{ controller_internal_url }}": {}
      Keepstore:
        # No ExternalURL because they are only accessed by the internal subnet.
        InternalURLs:
          "{{ keep_internal_url1 }}": {}
      Keepproxy:
        ExternalURL: "{{ keepproxy_external_url }}"
        InternalURLs:
          "{{ keepproxy_internal_url1 }}": {}
          "{{ keepproxy_internal_url2 }}": {}
      WebDAVDownload:
        ExternalURL: "{{ download_external_url }}"
      WebDAV:
        ExternalURL: "{{ collections_external_url }}"
        InternalURLs:
          "{{ collections_internal_url1 }}": {}
          "{{ collections_internal_url2 }}": {}
      Websocket:
        InternalURLs:
          "{{ ws_internal_url }}": {}
        ExternalURL: "{{ ws_external_url }}"
      Workbench1:
        ExternalURL: "{{ workbench1_external_url }}"
      Workbench2:
        ExternalURL: "{{ workbench2_external_url }}"
      DispatchCloud:
        InternalURLs:
          "{{ dispatch_cloud_internal_url }}": {}
    Containers:
      CloudVMs:
        # BootProbeCommand is a shell command that succeeds when an instance is ready for service
        BootProbeCommand: "sudo systemctl status docker"
        ImageID: "{{ cloud_image_id }}"
        Driver: ec2
        DriverParameters:
          # If you are not using an IAM role for authentication, specify access
          # credentials here. Otherwise, omit or set AccessKeyID and
          # SecretAccessKey to an empty value.
          AccessKeyID: "{{ cloud_access_key_id }}"
          SecretAccessKey: "{{ cloud_secret_key }}"
          
          SecurityGroupIDs:
          - "{{ security_group_id }}"
          SubnetID: "{{ subnet_id }}"
          Region: "{{ aws_region }}"
          EBSVolumeType: gp2
          AdminUsername: arvados
      DispatchPrivateKey: "{{ cloud_dispatch_private_key }}"
    InstanceTypes:
      t3xl:
        ProviderType: t3.xlarge
        VCPUs: 4
        RAM: 16GiB
        IncludedScratch: 64GB
        Price: 0.62
      t32x:
        ProviderType: t3.2xlarge
        VCPUs: 8
        RAM: 32GiB
        IncludedScratch: 64GB
        Price: 1.23
    Workbench:
      SecretKeyBase: "{{ workbench_secret_key }}"
    Volumes:
      btarv-nyw5e-000000000000000:
        Driver: S3
        DriverParameters:
          Bucket: "{{ s3_bucket_name }}"
          AccessKey: "{{ s3_access_key }}"
          SecretKey: "{{ s3_secret_key }}"
          Region: "{{ s3_region }}"

